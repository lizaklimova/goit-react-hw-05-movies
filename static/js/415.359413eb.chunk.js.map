{"version":3,"file":"static/js/415.359413eb.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/ScrollUpBtn/ScrollUpBtn.styled.jsx","components/ScrollUpBtn/ScrollUpBtn.jsx","helpers/determineReviewColor.js","helpers/makePercentage.js","pages/Home.jsx"],"sourcesContent":["import { styled } from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  padding: 60px 0;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 40px;\n`;\nexport const Item = styled.li`\n  position: relative;\n  transition: transform 350ms linear;\n\n  &:hover,\n  &:focus {\n    transform: scale(1.05);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: calc((100%) - 80px) / 3;\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: calc((100%) - 200px) / 6;\n  }\n`;\n\nexport const Poster = styled.img`\n  width: 250px;\n\n  @media screen and (min-width: 768px) {\n    width: 200px;\n    height: 300px;\n  }\n`;\nexport const MovieLink = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n`;\nexport const MovieTitle = styled.p`\n  max-width: 300px;\n  color: #ffffff;\n  font-weight: 700;\n  font-size: 25px;\n  text-align: center;\n\n  @media screen and (min-width: 428px) {\n    max-width: 398px;\n  }\n  @media screen and (min-width: 768px) {\n    max-width: 200px;\n    font-size: 21px;\n  }\n`;\n\nexport const VoteAvr = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: -20px;\n  right: -5px;\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  border: 1px solid #fff;\n  background-color: #1cb114;\n  font-weight: 600;\n  color: #fff;\n  font-size: 16px;\n`;\n\nexport const MovieRelease = styled.p`\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  color: #fff;\n`;\n","import defaultPoster from '../../images/default_poster.jpeg';\nimport { CiCalendar } from 'react-icons/ci';\nimport { Container } from 'components/App/App.styled';\nimport {\n  List,\n  Item,\n  Poster,\n  MovieLink,\n  MovieTitle,\n  VoteAvr,\n  MovieRelease,\n} from '../MoviesList/MoviesList.styled';\nimport makePercentage from 'helpers/makePercentage';\nimport determineReviewColor from 'helpers/determineReviewColor';\n\nconst MoviesList = ({ movies, location }) => {\n  return (\n    <div id={'movieList'}>\n      <Container>\n        <List>\n          {movies.map(\n            ({\n              id,\n              original_title,\n              poster_path,\n              vote_average,\n              release_date,\n            }) => (\n              <Item key={id}>\n                <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n                  <Poster\n                    src={\n                      poster_path\n                        ? `https://image.tmdb.org/t/p/w200${poster_path}`\n                        : defaultPoster\n                    }\n                    alt={original_title}\n                  />\n                  <VoteAvr\n                    style={{\n                      backgroundColor: determineReviewColor(\n                        makePercentage(vote_average)\n                      ),\n                    }}\n                  >\n                    {makePercentage(vote_average)}%\n                  </VoteAvr>\n                  <MovieTitle>{original_title}</MovieTitle>\n                  {release_date && (\n                    <MovieRelease>\n                      <CiCalendar />\n                      {release_date}\n                    </MovieRelease>\n                  )}\n                </MovieLink>\n              </Item>\n            )\n          )}\n        </List>\n      </Container>\n    </div>\n  );\n};\n\nexport default MoviesList;\n","import { styled } from 'styled-components';\n\nexport const ScrollUpButton = styled.button`\n  position: fixed;\n  bottom: 40px;\n  right: 37px;\n  background-color: #0dcb2d70;\n  border: 3px solid #fff;\n  border-radius: 50%;\n  width: 90px;\n  height: 90px;\n  cursor: pointer;\n  transition: transform 300ms linear;\n\n  &:hover,\n  &:focus {\n    transform: scale(1.1);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 100px;\n    height: 100px;\n  }\n`;\n","import { FaArrowUpLong } from 'react-icons/fa6';\nimport { ScrollUpButton } from './ScrollUpBtn.styled';\nimport { useEffect, useState } from 'react';\n\nconst ScrollUpBtn = () => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrollPosition = window.scrollY;\n\n      if (scrollPosition > 200) {\n        setIsVisible(true);\n      } else {\n        setIsVisible(false);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  return (\n    <ScrollUpButton\n      onClick={scrollToTop}\n      style={{ display: isVisible ? 'block' : 'none' }}\n    >\n      <FaArrowUpLong size={35} fill=\"#fff\" />\n    </ScrollUpButton>\n  );\n};\n\nexport default ScrollUpBtn;\n","const determineReviewColor = percentage => {\n  let color = '';\n  switch (true) {\n    case percentage >= 70:\n      color = '#1cb114';\n      break;\n    case percentage > 30:\n      color = '#c3c737';\n      break;\n    case percentage === 0:\n      color = '#64645b';\n      break;\n    default:\n      color = '#cd1313';\n  }\n  return color;\n};\nexport default determineReviewColor;\n","const makePercentage = num => {\n  return Math.ceil(Number(num) * 10);\n};\nexport default makePercentage;\n","import { useState, useEffect } from 'react';\nimport { getTrending } from 'service/movies-api';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Loader from 'components/Loader/Loader';\nimport notification from 'helpers/notification';\nimport ScrollUpBtn from 'components/ScrollUpBtn/ScrollUpBtn';\n\nconst Home = () => {\n  const [trendings, setTrendings] = useState([]);\n  const [loader, setLoader] = useState(false);\n\n  useEffect(() => {\n    setLoader(true);\n\n    const fetchTrendings = async () => {\n      try {\n        const response = await getTrending();\n        setTrendings(response);\n      } catch ({ message }) {\n        notification(message);\n      } finally {\n        setLoader(false);\n      }\n    };\n    fetchTrendings();\n  }, []);\n\n  return (\n    <>\n      {loader && <Loader />}\n\n      {trendings.length > 0 && <MoviesList movies={trendings} />}\n      <ScrollUpBtn />\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["List","styled","_templateObject","_taggedTemplateLiteral","Item","_templateObject2","Poster","_templateObject3","MovieLink","Link","_templateObject4","MovieTitle","_templateObject5","VoteAvr","_templateObject6","MovieRelease","_templateObject7","_ref","movies","location","_jsx","id","children","Container","map","_ref2","original_title","poster_path","vote_average","release_date","_jsxs","to","concat","state","from","src","defaultPoster","alt","style","backgroundColor","determineReviewColor","makePercentage","CiCalendar","ScrollUpButton","_useState","useState","_useState2","_slicedToArray","isVisible","setIsVisible","useEffect","handleScroll","scrollPosition","window","scrollY","addEventListener","removeEventListener","onClick","scrollTo","top","behavior","display","FaArrowUpLong","size","fill","percentage","color","num","Math","ceil","Number","trendings","setTrendings","_useState3","_useState4","loader","setLoader","fetchTrendings","_asyncToGenerator","_regeneratorRuntime","_callee","response","message","_context","prev","next","getTrending","sent","t0","notification","finish","stop","apply","arguments","_Fragment","Loader","length","MoviesList","ScrollUpBtn"],"sourceRoot":""}